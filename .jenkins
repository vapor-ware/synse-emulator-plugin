#!/usr/bin/env groovy

pipeline {

  agent any

  environment {
    PROJ_PATH = '/go/src/github.com/vapor-ware/synse-emulator-plugin'
    IMAGE_NAME = 'vaporio/emulator-plugin'
    GOPATH = $JOBDIR

  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Snapshot') {

    }















    // Verify that the binary and Docker image build successfully.
    // The binary build is done as a dependency to the 'docker'
    // make target.
    stage('Build Binary & Image') {
      steps {
        script {
          docker.image('vaporio/golang:1.11').inside() {
            // Set up the project in the docker container. The project must be
            // on the GOPATH (/go) in order to correctly vendor dependencies and
            // build the project artifacts.
            sh 'mkdir -p ${PROJ_PATH} && cp -r ${WORKSPACE}/* ${PROJ_PATH}'

            // The pipeline's 'dir()' directive is broken when run inside a docker
            // container, so we need to 'cd' into the project directory prior to
            // running the required commands.
            sh 'go get -u github.com/golang/dep/cmd/dep'
            sh 'cd ${PROJ_PATH} && make dep'
            sh 'cd ${PROJ_PATH} && make build'

            // Copy the build artifact down so we can access it later in the stage
            // via the volume mount.
            sh 'cp ${PROJ_PATH}/synse-emulator-plugin .'
          }
        }

        sh 'make docker'
      }
    }

    // Generate a new release draft on GitHub for a tag matching a version string
    // pattern. The release will include an auto-generated changelog and build
    // artifacts.
    stage('Draft GitHub Release') {
      when {
        // example matches: 1.2.3, 1.2.3-dev
        tag pattern: '(0|[1-9]*)\\.(0|[1-9]*)\\.(0|[1-9]*)(-(\\S*))?$', comparator: "REGEXP"
      }
      environment {
        GITHUB_TOKEN = credentials('vio-bot-gh-token')
      }
      steps {
        withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
          sh 'GOVERSION=$(go version | awk \'{print $3}\') goreleaser --snapshot --rm-dist'
        }
      }
    }
  }
}
